


ARM Macro Assembler    Page 1 


    1 00000000                 export           bubble_sort
    2 00000000                 import           __main
    3 00000000         
    4 00000000                 AREA             FLASH, CODE, READONLY
    5 00000000                 ALIGN
    6 00000000         
    7 00000000         
    8 00000000         ;*******************************************************
                       ***********************
    9 00000000         ; Description
   10 00000000         ;     Given the address in R7, it will read the unsigned
                        byte at R7 and R7 + 1.
   11 00000000         ;     If [R7] > [R7 + 1], swap the values
   12 00000000         ;
   13 00000000         ;     Modify only registers R8 or greater.
   14 00000000         ;
   15 00000000         ; Parameters
   16 00000000         ;   R7 - Array Address
   17 00000000         ;
   18 00000000         ; Returns
   19 00000000         ;   Nothing
   20 00000000         ;*******************************************************
                       ***********************
   21 00000000         swap_values
                               PROC
   22 00000000         ;---------------------------------------
   23 00000000         ; START ADD CODE
   24 00000000         ;---------------------------------------
   25 00000000         
   26 00000000         ; Load the first value in the array
   27 00000000 F897 8000       LDRB             R8, [R7, #0]
   28 00000004         
   29 00000004         ; Load the next value to R9
   30 00000004 F897 9001       LDRB             R9, [R7, #1]
   31 00000008         
   32 00000008         ; Copy the i+1 value; temporary
   33 00000008 46CA            MOV              R10, R9
   34 0000000A 45C8            CMP              R8, R9
   35 0000000C D903            BLS              exit
   36 0000000E         ; Swap the values if i > i+1
   37 0000000E F887 8001       STRB             R8, [R7, #1]
   38 00000012 F887 A000       STRB             R10, [R7, #0]
   39 00000016         
   40 00000016         ; Return from the function
   41 00000016         exit
   42 00000016 4770            BX               LR
   43 00000018         
   44 00000018         ;---------------------------------------
   45 00000018         ; END ADD CODE
   46 00000018         ;---------------------------------------
   47 00000018                 ENDP
   48 00000018         
   49 00000018         
   50 00000018         
   51 00000018         ;*******************************************************
                       ***********************
   52 00000018         ; Description
   53 00000018         ;   Uses Bubble Sort to sort an array of unsigned 8-bit 
                       numbers.



ARM Macro Assembler    Page 2 


   54 00000018         ;
   55 00000018         ;   Modify only registers R0-R7
   56 00000018         ;
   57 00000018         ; Parameters
   58 00000018         ;   R0 - Array Address
   59 00000018         ;   R1 - Array Size
   60 00000018         ;
   61 00000018         ; Returns
   62 00000018         ;   Nothing
   63 00000018         ;*******************************************************
                       ***********************
   64 00000018         bubble_sort
                               PROC
   65 00000018         
   66 00000018         ; Save registers
   67 00000018 E92D 5FFF       PUSH             {R0-R12, LR}
   68 0000001C         
   69 0000001C         ;---------------------------------------
   70 0000001C         ; START ADD CODE
   71 0000001C         ;---------------------------------------
   72 0000001C         
   73 0000001C F1A1 0101       SUB              R1, R1, #1
   74 00000020         
   75 00000020         while_outer_start
   76 00000020 2900            CMP              R1, #0
   77 00000022 D00E            BEQ              while_outer_end
   78 00000024         
   79 00000024         ; R2 saves the current index
   80 00000024 F04F 0200       MOV              R2, #0
   81 00000028         
   82 00000028         ; # counter for first check
   83 00000028 4607            MOV              R7, R0
   84 0000002A         while_inner_start
   85 0000002A 428A            CMP              R2, R1
   86 0000002C D806            BHI              while_inner_end
   87 0000002E F7FF FFFE       BL               swap_values
   88 00000032 F107 0701       ADD              R7, R7, #1
   89 00000036 F102 0201       ADD              R2, R2, #1
   90 0000003A E7F6            B                while_inner_start
   91 0000003C         
   92 0000003C         while_inner_end
   93 0000003C F1A1 0101       SUB              R1, R1, #1
   94 00000040 E7EE            B                while_outer_start
   95 00000042         
   96 00000042         while_outer_end
   97 00000042         
   98 00000042         ; NOTE: The return from the function is already
   99 00000042         ; provided below
  100 00000042         
  101 00000042         ;---------------------------------------
  102 00000042         ; END ADD CODE
  103 00000042         ;---------------------------------------
  104 00000042         
  105 00000042         
  106 00000042         ; Restore Registers
  107 00000042 E8BD 5FFF       POP              {R0-R12, LR}
  108 00000046         
  109 00000046         ; Return from the function
  110 00000046 4770            BX               LR



ARM Macro Assembler    Page 3 


  111 00000048         
  112 00000048                 ENDP
  113 00000048         
  114 00000048                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\bubblesort.d -o.\obj\bubblesort.o -I.\RTE\_ICE-05-ARM-Fun
ctions -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PAC
K\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__MICROLIB SETA 1" --
predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="
TM4C123GH6PM SETA 1" --list=.\lst\bubblesort.lst bubbleSort.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 4 in file bubbleSort.s
   Uses
      None
Comment: FLASH unused
bubble_sort 00000018

Symbol: bubble_sort
   Definitions
      At line 64 in file bubbleSort.s
   Uses
      At line 1 in file bubbleSort.s
Comment: bubble_sort used once
exit 00000016

Symbol: exit
   Definitions
      At line 41 in file bubbleSort.s
   Uses
      At line 35 in file bubbleSort.s
Comment: exit used once
swap_values 00000000

Symbol: swap_values
   Definitions
      At line 21 in file bubbleSort.s
   Uses
      At line 87 in file bubbleSort.s
Comment: swap_values used once
while_inner_end 0000003C

Symbol: while_inner_end
   Definitions
      At line 92 in file bubbleSort.s
   Uses
      At line 86 in file bubbleSort.s
Comment: while_inner_end used once
while_inner_start 0000002A

Symbol: while_inner_start
   Definitions
      At line 84 in file bubbleSort.s
   Uses
      At line 90 in file bubbleSort.s
Comment: while_inner_start used once
while_outer_end 00000042

Symbol: while_outer_end
   Definitions
      At line 96 in file bubbleSort.s
   Uses
      At line 77 in file bubbleSort.s
Comment: while_outer_end used once
while_outer_start 00000020

Symbol: while_outer_start



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 75 in file bubbleSort.s
   Uses
      At line 94 in file bubbleSort.s
Comment: while_outer_start used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__main 00000000

Symbol: __main
   Definitions
      At line 2 in file bubbleSort.s
   Uses
      None
Comment: __main unused
1 symbol
344 symbols in table
