


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     main.s 
    2 00000000         ; Author:       ece353 staff 
    3 00000000         ; Description:  
    4 00000000         
    5 00000000                 export           __main
    6 00000000                 import           matrixMultiply
    7 00000000         
    8 00000000 00000004 
                       WORD    EQU              4
    9 00000000 00000002 
                       HALF_WORD
                               EQU              2
   10 00000000 00000001 
                       BYTE    EQU              1
   11 00000000         
   12 00000000 00000000 
                       NULL    EQU              0
   13 00000000 00000000 
                       SUCCESS EQU              0
   14 00000000 FFFFFFFF 
                       FAILED  EQU              -1
   15 00000000         
   16 00000000         ;**********************************************
   17 00000000         ; SRAM
   18 00000000         ;**********************************************
   19 00000000                 AREA             SRAM, READWRITE
   20 00000000 00000000 
                       MATRIX_A
                               DCD              0x00000000
   21 00000004 00000000 
                       MATRIX_B
                               DCD              0x00000000
   22 00000008 00000000 
                       MATRIX_C
                               DCD              0x00000000
   23 0000000C                 align
   24 0000000C         
   25 0000000C         ;**********************************************
   26 0000000C         ; Constant Variables (FLASH) Segment
   27 0000000C         ;**********************************************
   28 0000000C                 AREA             FLASH, CODE, READONLY
   29 00000000         
   30 00000000                 align
   31 00000000         
   32 00000000         ;**********************************************
   33 00000000         ; Initializes a variable in SRAM
   34 00000000         ; (Caller Saved)
   35 00000000         ;
   36 00000000         ; Paramters
   37 00000000         ;   R0 - Address
   38 00000000         ;   R1 - Bytes
   39 00000000         ;   R2 - Value
   40 00000000         ;
   41 00000000         ; Returns
   42 00000000         ;   R0 - 0 for success
   43 00000000         ;      - -1 for error
   44 00000000         ;**********************************************
   45 00000000         initVar PROC
   46 00000000         



ARM Macro Assembler    Page 2 


   47 00000000         ; This is a caller saved function, so there
   48 00000000         ; is no need to save any of the registers 
   49 00000000         ; that are modifed.
   50 00000000         
   51 00000000         ; If the Address is equal to 0, return -1
   52 00000000 2800            CMP              R0, #NULL
   53 00000002 BF04 F04F 
              30FF             MOVEQ            R0, #FAILED
   54 00000008 4770            BXEQ             LR
   55 0000000A         
   56 0000000A         ; if ( Data Size == 4)
   57 0000000A         ; Word Store
   58 0000000A 2904            CMP              R1, #WORD
   59 0000000C BF02 6002       STREQ            R2, [R0]
   60 00000010 2000            MOVEQ            R0, #SUCCESS
   61 00000012 4770            BXEQ             LR
   62 00000014         
   63 00000014         ; if ( Data Size == 2)
   64 00000014         ; Half Word Store
   65 00000014 2902            CMP              R1, #HALF_WORD
   66 00000016 BF02 8002       STRHEQ           R2, [R0]
   67 0000001A 2000            MOVEQ            R0, #SUCCESS
   68 0000001C 4770            BXEQ             LR
   69 0000001E         
   70 0000001E         ; if (Data Size == 1)
   71 0000001E         ; Byte Store
   72 0000001E 2901            CMP              R1, #BYTE
   73 00000020 BF02 7002       STRBEQ           R2, [R0]
   74 00000024 2000            MOVEQ            R0, #SUCCESS
   75 00000026 4770            BXEQ             LR
   76 00000028         
   77 00000028         ; Any other word size return -1
   78 00000028 F04F 30FF       MOV              R0, #FAILED
   79 0000002C 4770            BX               LR
   80 0000002E         
   81 0000002E                 ENDP
   82 0000002E         
   83 0000002E         
   84 0000002E         ;**********************************************
   85 0000002E         ; Code (FLASH) Segment
   86 0000002E         ; main assembly program
   87 0000002E         ;**********************************************
   88 0000002E         __main  PROC
   89 0000002E         
   90 0000002E F04F 0104       MOV              R1, #4
   91 00000032 4C19            LDR              R4, =(MATRIX_A)
   92 00000034 4D19            LDR              R5, =(MATRIX_B)
   93 00000036 4E1A            LDR              R6, =(MATRIX_C)
   94 00000038         
   95 00000038         ; Initialize MATRIX_A
   96 00000038         ; <ADD CODE  1 >
   97 00000038 4620            MOV              R0, R4
   98 0000003A F04F 0104       MOV              R1, #WORD
   99 0000003E F240 1200 
              F2C0 3202        MOV32            R2, #0x03020100
  100 00000046 B472            PUSH             {R1, R4-R6}
  101 00000048 F7FF FFFE       BL               initVar
  102 0000004C BC72            POP              {R1, R4-R6}
  103 0000004E         



ARM Macro Assembler    Page 3 


  104 0000004E         ; Initialize MATRIX_B
  105 0000004E         ; <ADD CODE  2 >
  106 0000004E 4628            MOV              R0, R5
  107 00000050 F04F 0104       MOV              R1, #WORD
  108 00000054 F240 5204 
              F2C0 7206        MOV32            R2, #0x07060504
  109 0000005C B472            PUSH             {R1, R4-R6}
  110 0000005E F7FF FFFE       BL               initVar
  111 00000062 BC72            POP              {R1, R4-R6}
  112 00000064         
  113 00000064         ; Initialize MATRIX_C
  114 00000064         ; <ADD CODE  3 >
  115 00000064 4630            MOV              R0, R6
  116 00000066 F04F 0104       MOV              R1, #WORD
  117 0000006A F240 0200 
              F2C0 0200        MOV32            R2, #0x00000000
  118 00000072 B472            PUSH             {R1, R4-R6}
  119 00000074 F7FF FFFE       BL               initVar
  120 00000078 BC72            POP              {R1, R4-R6}
  121 0000007A         
  122 0000007A         ; Call matrixMultiply.  Pass the three paramters to usin
                       g
  123 0000007A         ; the stack
  124 0000007A         ; <ADD CODE  4 >
  125 0000007A B470            PUSH             {R6, R4, R5}
  126 0000007C F7FF FFFE       BL               matrixMultiply
  127 00000080 BC70            POP              {R6, R4, R5}
  128 00000082         ; Verify that MATRIX_C has a value
  129 00000082         ; of 0x1F1A0706.  If it does, branch to 
  130 00000082         ; PASSED
  131 00000082         ; <ADD CODE  10 >
  132 00000082 F240 7A06 
              F6C1 7A1A        MOV32            R10, #0x1F1A0706
  133 0000008A F8D6 9000       LDR              R9, [R6]
  134 0000008E 45D1            CMP              R9, R10
  135 00000090 D000            BEQ              PASSED
  136 00000092         
  137 00000092         
  138 00000092         FAIL
  139 00000092 E7FE            B                FAIL
  140 00000094         
  141 00000094         PASSED
  142 00000094 E7FE            B                PASSED
  143 00000096         
  144 00000096         ; DO NOT MODIFY ANTHING BELOW THIS LINE!!!
  145 00000096         
  146 00000096         INFINITE_LOOP
  147 00000096 E7FE            B                INFINITE_LOOP
  148 00000098         
  149 00000098                 ENDP
  150 00000098         
  151 00000098         
  152 00000098         
  153 00000098                 align
  154 00000098         
  155 00000098         
  156 00000098                 END
              00000000 
              00000000 



ARM Macro Assembler    Page 4 


              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\ece353_main.d -o.\obj\ece353_main.o -I.\RTE\_Target_1 -IC
:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4
C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__MICROLIB SETA 1" --predefine=
"__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6
PM SETA 1" --list=.\lst\ece353_main.lst ece353_main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MATRIX_A 00000000

Symbol: MATRIX_A
   Definitions
      At line 20 in file ece353_main.s
   Uses
      At line 91 in file ece353_main.s
Comment: MATRIX_A used once
MATRIX_B 00000004

Symbol: MATRIX_B
   Definitions
      At line 21 in file ece353_main.s
   Uses
      At line 92 in file ece353_main.s
Comment: MATRIX_B used once
MATRIX_C 00000008

Symbol: MATRIX_C
   Definitions
      At line 22 in file ece353_main.s
   Uses
      At line 93 in file ece353_main.s
Comment: MATRIX_C used once
SRAM 00000000

Symbol: SRAM
   Definitions
      At line 19 in file ece353_main.s
   Uses
      None
Comment: SRAM unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FAIL 00000092

Symbol: FAIL
   Definitions
      At line 138 in file ece353_main.s
   Uses
      At line 139 in file ece353_main.s
Comment: FAIL used once
FLASH 00000000

Symbol: FLASH
   Definitions
      At line 28 in file ece353_main.s
   Uses
      None
Comment: FLASH unused
INFINITE_LOOP 00000096

Symbol: INFINITE_LOOP
   Definitions
      At line 146 in file ece353_main.s
   Uses
      At line 147 in file ece353_main.s
Comment: INFINITE_LOOP used once
PASSED 00000094

Symbol: PASSED
   Definitions
      At line 141 in file ece353_main.s
   Uses
      At line 135 in file ece353_main.s
      At line 142 in file ece353_main.s

__main 0000002E

Symbol: __main
   Definitions
      At line 88 in file ece353_main.s
   Uses
      At line 5 in file ece353_main.s
Comment: __main used once
initVar 00000000

Symbol: initVar
   Definitions
      At line 45 in file ece353_main.s
   Uses
      At line 101 in file ece353_main.s
      At line 110 in file ece353_main.s
      At line 119 in file ece353_main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BYTE 00000001

Symbol: BYTE
   Definitions
      At line 10 in file ece353_main.s
   Uses
      At line 72 in file ece353_main.s
Comment: BYTE used once
FAILED FFFFFFFF

Symbol: FAILED
   Definitions
      At line 14 in file ece353_main.s
   Uses
      At line 53 in file ece353_main.s
      At line 78 in file ece353_main.s

HALF_WORD 00000002

Symbol: HALF_WORD
   Definitions
      At line 9 in file ece353_main.s
   Uses
      At line 65 in file ece353_main.s
Comment: HALF_WORD used once
NULL 00000000

Symbol: NULL
   Definitions
      At line 12 in file ece353_main.s
   Uses
      At line 52 in file ece353_main.s
Comment: NULL used once
SUCCESS 00000000

Symbol: SUCCESS
   Definitions
      At line 13 in file ece353_main.s
   Uses
      At line 60 in file ece353_main.s
      At line 67 in file ece353_main.s
      At line 74 in file ece353_main.s

WORD 00000004

Symbol: WORD
   Definitions
      At line 8 in file ece353_main.s
   Uses
      At line 58 in file ece353_main.s
      At line 98 in file ece353_main.s
      At line 107 in file ece353_main.s
      At line 116 in file ece353_main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

matrixMultiply 00000000

Symbol: matrixMultiply
   Definitions
      At line 6 in file ece353_main.s
   Uses
      At line 126 in file ece353_main.s
Comment: matrixMultiply used once
1 symbol
354 symbols in table
